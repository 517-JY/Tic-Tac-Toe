{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport var printFormattedBoard = function printFormattedBoard(state) {\n  var formattedString = '';\n  state.forEach(function (cell, index) {\n    formattedString += cell ? \" \" + cell + \" |\" : '   |';\n\n    if ((index + 1) % 3 === 0) {\n      formattedString = formattedString.slice(0, -1);\n\n      if (index < 8) {\n        formattedString += \"\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n\";\n      }\n    }\n  });\n  console.log(formattedString);\n};\nexport var isEmpty = function isEmpty(state) {\n  return state.every(function (cell) {\n    return cell === null;\n  });\n};\nexport var isFull = function isFull(state) {\n  return state.every(function (cell) {\n    return cell;\n  });\n};\nexport var getAvailableMoves = function getAvailableMoves(state) {\n  var moves = [];\n  state.forEach(function (cell, index) {\n    if (cell === null) {\n      moves.push(index);\n    }\n  });\n  return moves;\n};\nexport var isTerminal = function isTerminal(state) {\n  if (isEmpty(state)) return false;\n  var winningLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (var index = 0; index < winningLines.length; index++) {\n    var line = winningLines[index];\n\n    var _line = _slicedToArray(line, 3),\n        cell1 = _line[0],\n        cell2 = _line[1],\n        cell3 = _line[2];\n\n    if (state[cell1] && state[cell1] === state[cell2] && state[cell1] === state[cell3]) {\n      var result = {\n        winner: state[cell1]\n      };\n\n      if (index < 3) {\n        result.direction = 'H';\n        result.row = index === 0 ? 1 : index === 1 ? 2 : 3;\n      }\n\n      if (index >= 3 && index <= 5) {\n        result.direction = 'V';\n        result.column = index === 3 ? 1 : index === 4 ? 2 : 3;\n      }\n\n      if (index > 5) {\n        result.direction = 'D';\n        result.diagonal = index === 5 ? 'MAIN' : 'COUNTER';\n      }\n\n      return result;\n    }\n\n    if (isFull(state)) {\n      return {\n        winner: null\n      };\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/lidian/Desktop/Coding/Udemy/Tic-Tac-Toe/src/utils/board.ts"],"names":["printFormattedBoard","state","formattedString","forEach","cell","index","slice","console","log","isEmpty","every","isFull","getAvailableMoves","moves","push","isTerminal","winningLines","length","line","cell1","cell2","cell3","result","winner","direction","row","column","diagonal"],"mappings":";AAEA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAA6B;AAC7D,MAAIC,eAAe,GAAG,EAAtB;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC5BH,IAAAA,eAAe,IAAIE,IAAI,SAAOA,IAAP,UAAkB,MAAzC;;AACA,QAAI,CAACC,KAAK,GAAG,CAAT,IAAc,CAAd,KAAoB,CAAxB,EAA2B;AACxBH,MAAAA,eAAe,GAAGA,eAAe,CAACI,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAlB;;AACA,UAAID,KAAK,GAAG,CAAZ,EAAe;AACZH,QAAAA,eAAe,IACZ,8DADH;AAEF;AACH;AACH,GATD;AAUAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,eAAZ;AACF,CAbM;AAeP,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAACR,KAAD,EAAgC;AAGpD,SAAOA,KAAK,CAACS,KAAN,CAAY,UAACN,IAAD,EAAU;AAC1B,WAAOA,IAAI,KAAK,IAAhB;AACF,GAFM,CAAP;AAGF,CANM;AAQP,OAAO,IAAMO,MAAM,GAAG,SAATA,MAAS,CAACV,KAAD,EAAgC;AACnD,SAAOA,KAAK,CAACS,KAAN,CAAY,UAACN,IAAD;AAAA,WAAUA,IAAV;AAAA,GAAZ,CAAP;AACF,CAFM;AAIP,OAAO,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAACX,KAAD,EAAgC;AAC9D,MAAMY,KAAc,GAAG,EAAvB;AACAZ,EAAAA,KAAK,CAACE,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC5B,QAAID,IAAI,KAAK,IAAb,EAAmB;AAChBS,MAAAA,KAAK,CAACC,IAAN,CAAWT,KAAX;AACF;AACH,GAJD;AAKA,SAAOQ,KAAP;AACF,CARM;AAUP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACd,KAAD,EAA4C;AACnE,MAAIQ,OAAO,CAACR,KAAD,CAAX,EAAoB,OAAO,KAAP;AACpB,MAAMe,YAAY,GAAG,CAElB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFkB,EAGlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHkB,EAIlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJkB,EAMlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANkB,EAOlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPkB,EAQlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARkB,EAUlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAVkB,EAWlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAXkB,CAArB;;AAcA,OAAK,IAAIX,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGW,YAAY,CAACC,MAAzC,EAAiDZ,KAAK,EAAtD,EAA0D;AACvD,QAAMa,IAAI,GAAGF,YAAY,CAACX,KAAD,CAAzB;;AACA,+BAA8Ba,IAA9B;AAAA,QAAOC,KAAP;AAAA,QAAcC,KAAd;AAAA,QAAqBC,KAArB;;AAEA,QACGpB,KAAK,CAACkB,KAAD,CAAL,IACAlB,KAAK,CAACkB,KAAD,CAAL,KAAiBlB,KAAK,CAACmB,KAAD,CADtB,IAEAnB,KAAK,CAACkB,KAAD,CAAL,KAAiBlB,KAAK,CAACoB,KAAD,CAHzB,EAIE;AACC,UAAMC,MAAmB,GAAG;AACzBC,QAAAA,MAAM,EAAEtB,KAAK,CAACkB,KAAD;AADY,OAA5B;;AAGA,UAAId,KAAK,GAAG,CAAZ,EAAe;AACZiB,QAAAA,MAAM,CAACE,SAAP,GAAmB,GAAnB;AACAF,QAAAA,MAAM,CAACG,GAAP,GAAapB,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkBA,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAAjD;AACF;;AACD,UAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA3B,EAA8B;AAC3BiB,QAAAA,MAAM,CAACE,SAAP,GAAmB,GAAnB;AACAF,QAAAA,MAAM,CAACI,MAAP,GAAgBrB,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkBA,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAApD;AACF;;AACD,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACZiB,QAAAA,MAAM,CAACE,SAAP,GAAmB,GAAnB;AACAF,QAAAA,MAAM,CAACK,QAAP,GAAkBtB,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuB,SAAzC;AACF;;AAED,aAAOiB,MAAP;AACF;;AAED,QAAIX,MAAM,CAACV,KAAD,CAAV,EAAmB;AAChB,aAAO;AACJsB,QAAAA,MAAM,EAAE;AADJ,OAAP;AAGF;;AAED,WAAO,KAAP;AACF;AACH,CApDM","sourcesContent":["import { BoardState, Moves, BoardResult } from '@utils';\n\nexport const printFormattedBoard = (state: BoardState): void => {\n   let formattedString = '';\n   state.forEach((cell, index) => {\n      formattedString += cell ? ` ${cell} |` : '   |';\n      if ((index + 1) % 3 === 0) {\n         formattedString = formattedString.slice(0, -1);\n         if (index < 8) {\n            formattedString +=\n               '\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n';\n         }\n      }\n   });\n   console.log(formattedString);\n};\n\nexport const isEmpty = (state: BoardState): boolean => {\n   // this entire expression will return true only if every function\n   // cell in each cell returns true\n   return state.every((cell) => {\n      return cell === null;\n   });\n};\n\nexport const isFull = (state: BoardState): boolean => {\n   return state.every((cell) => cell);\n};\n\nexport const getAvailableMoves = (state: BoardState): Moves[] => {\n   const moves: Moves[] = [];\n   state.forEach((cell, index) => {\n      if (cell === null) {\n         moves.push(index as Moves);\n      }\n   });\n   return moves;\n};\n\nexport const isTerminal = (state: BoardState): BoardResult | false => {\n   if (isEmpty(state)) return false;\n   const winningLines = [\n      // row\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      // column\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      // diagonal\n      [0, 4, 8],\n      [2, 4, 6],\n   ];\n\n   for (let index = 0; index < winningLines.length; index++) {\n      const line = winningLines[index];\n      const [cell1, cell2, cell3] = line;\n\n      if (\n         state[cell1] &&\n         state[cell1] === state[cell2] &&\n         state[cell1] === state[cell3]\n      ) {\n         const result: BoardResult = {\n            winner: state[cell1],\n         };\n         if (index < 3) {\n            result.direction = 'H';\n            result.row = index === 0 ? 1 : index === 1 ? 2 : 3;\n         }\n         if (index >= 3 && index <= 5) {\n            result.direction = 'V';\n            result.column = index === 3 ? 1 : index === 4 ? 2 : 3;\n         }\n         if (index > 5) {\n            result.direction = 'D';\n            result.diagonal = index === 5 ? 'MAIN' : 'COUNTER';\n         }\n\n         return result;\n      }\n\n      if (isFull(state)) {\n         return {\n            winner: null,\n         };\n      }\n\n      return false;\n   }\n};\n"]},"metadata":{},"sourceType":"module"}