{"ast":null,"code":"export var printFormattedBoard = function printFormattedBoard(state) {\n  var formattedString = '';\n  state.forEach(function (cell, index) {\n    formattedString += cell ? \" \" + cell + \" |\" : '   |';\n\n    if ((index + 1) % 3 === 0) {\n      formattedString = formattedString.slice(0, -1);\n\n      if (index < 8) {\n        formattedString += \"\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n\";\n      }\n    }\n  });\n  console.log(formattedString);\n};\nexport var isEmpty = function isEmpty(state) {\n  return state.every(function (cell) {\n    return cell === null;\n  });\n};","map":{"version":3,"sources":["/Users/lidian/Desktop/Coding/Udemy/Tic-Tac-Toe/src/utils/board.ts"],"names":["printFormattedBoard","state","formattedString","forEach","cell","index","slice","console","log","isEmpty","every"],"mappings":"AAEA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAA6B;AAC7D,MAAIC,eAAe,GAAG,EAAtB;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC5BH,IAAAA,eAAe,IAAIE,IAAI,SAAOA,IAAP,UAAkB,MAAzC;;AACA,QAAI,CAACC,KAAK,GAAG,CAAT,IAAc,CAAd,KAAoB,CAAxB,EAA2B;AACxBH,MAAAA,eAAe,GAAGA,eAAe,CAACI,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAlB;;AACA,UAAID,KAAK,GAAG,CAAZ,EAAe;AACZH,QAAAA,eAAe,IACZ,8DADH;AAEF;AACH;AACH,GATD;AAUAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,eAAZ;AACF,CAbM;AAeP,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAACR,KAAD,EAAgC;AAGpD,SAAOA,KAAK,CAACS,KAAN,CAAY,UAACN,IAAD,EAAU;AAC1B,WAAOA,IAAI,KAAK,IAAhB;AACF,GAFM,CAAP;AAGF,CANM","sourcesContent":["import { BoardState } from '@utils';\n\nexport const printFormattedBoard = (state: BoardState): void => {\n   let formattedString = '';\n   state.forEach((cell, index) => {\n      formattedString += cell ? ` ${cell} |` : '   |';\n      if ((index + 1) % 3 === 0) {\n         formattedString = formattedString.slice(0, -1);\n         if (index < 8) {\n            formattedString +=\n               '\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n';\n         }\n      }\n   });\n   console.log(formattedString);\n};\n\nexport const isEmpty = (state: BoardState): boolean => {\n   // this entire expression will return true only if every function\n   // cell in each cell returns true\n   return state.every((cell) => {\n      return cell === null;\n   });\n};\n"]},"metadata":{},"sourceType":"module"}